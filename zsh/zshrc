# binds

bindkey "^P" history-beginning-search-backward
bindkey "^N" history-beginning-search-forward

# env

export PATH="$PATH:$HOME/.bin"
export PATH="$PATH:$HOME/.local/bin"

if [[ "$(uname)" == "Linux" ]] && [[ ! $(uname -o) == "Android" ]]; then
  export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
  export PATH="/home/linuxbrew/.linuxbrew/sbin:$PATH"
  export PATH="/home/linuxbrew/.linuxbrew/opt:$PATH"
fi

export TERM="xterm-256color"
export LANG="en_US.UTF-8"
export SHELL="$(which zsh)"

if [[ -n "$(command -v nvim 2> /dev/null)" ]]; then
  export EDITOR="nvim"
elif [[ -n "$(command -v vim 2> /dev/null)" ]]; then
  export EDITOR="vim"
else
  export EDITOR="vi"
fi

export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

# aliases

if [[ "$(uname)" == "Darwin" ]]; then
  alias lock='open -a ScreenSaverEngine'
  alias hidedesktop='defaults write com.apple.finder CreateDesktop false && killall Finder'
  alias showdesktop='defaults write com.apple.finder CreateDesktop true && killall Finder'
elif [[ "$(uname)" == "Linux" ]]; then
  alias lock='i3lock'
fi

alias be='bundle exec'
alias bi='bundle install'
alias d='docker'
alias dc='docker-compose'
alias pos='poetry shell'
alias vac='source venv/bin/activate'

alias home='cd $HOME'
alias dev='cd $HOME/dev'
alias b-ggs='cd $HOME/dev/b-ggs'
alias dotfiles='cd $HOME/.files'
alias dump='mkdir -p $HOME/.dump && cd $HOME/.dump'
alias dotbin='cd $HOME/.bin'
alias Downloads='cd $HOME/Downloads'
alias Desktop='cd $HOME/Desktop'
alias dockerfiles='cd $HOME/dev/b-ggs/dockerfiles'
alias wslhome='cd $(wslpath $(wslvar USERPROFILE))'

alias known-hosts='$EDITOR $HOME/.ssh/known_hosts'
alias ssh-config='cd $HOME/.ssh-config'
alias authorized-keys='cd $HOME/.authorized-keys'

alias ind='cd $HOME/dev/inDinero/indinero'
alias ind-map='cd $HOME/dev/inDinero/indinero-ms-map-rails-vproto'
alias ind-leap='cd $HOME/dev/inDinero/leap'
alias ind-ntbk='cd $HOME/dev/b-ggs/indinero-notebook'

alias mp='cd $HOME/dev/mplusmuseum/website-cms'
alias mf='cd $HOME/dev/mozilla/foundation.mozilla.org'

alias lipsum='echo "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum." | pbcopy'

# prompt

local USER_HOST='%K{9} %F{0}%n%f%F{0}@%F{0}%m%f %k '
if [[ -n "$SSH_CLIENT" ]]; then
  local SSH_CLIENT_PROMPT='%K{12} %F{0}SSH%f %k '
fi
local PWD_PROMPT='%K{12} %F{0}%~%f %k'
ZSH_THEME_GIT_PROMPT_PREFIX=' %K{12} %F{0}git@'
ZSH_THEME_GIT_PROMPT_SUFFIX='%f %k'
local GIT_PROMPT='$(git_prompt_info) '
if [[ -n "$(command -v pyenv)" ]]; then
  local PYENV_PROMPT='%K{12} %F{0}pyenv@$(pyenv_prompt_info)%f %k '
  ZSH_THEME_VIRTUALENV_PREFIX='%K{12} %F{0}venv@'
  ZSH_THEME_VIRTUALENV_SUFFIX='%f %k '
  local VIRTUALENV_PROMPT='$(virtualenv_prompt_info)'
fi
if [[ -d "$HOME/.fnm" ]]; then
  local FNM_PROMPT='%K{12} %F{0}fnm@$(fnm current)%f %k '
fi
local TIME="%K{12} %F{0}%*%f %k"
local RETURN_PROMPT="%(?.. %K{12} %F{0}%?%f %k)"

PROMPT="${USER_HOST}${SSH_CLIENT_PROMPT}${PWD_PROMPT}${GIT_PROMPT}${PYENV_PROMPT}${VIRTUALENV_PROMPT}${FNM_PROMPT}${TIME}${RETURN_PROMPT}"$'\n'"$ "

# pyenv

# check if pyenv is installed
if [[ -n "$(command -v pyenv)" ]]; then
  eval "$(pyenv init -)"
fi

# fzf

# Change default fzf command to use rg
export FZF_DEFAULT_COMMAND='rg --files --hidden'
# Use 16-color colorscheme
export FZF_DEFAULT_OPTS="--color 16"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# git aliases
# shamefully stolen from:
# https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/git.plugin.zsh
# https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/git.zsh

alias gst='git status'
alias gd='git diff'
alias ga='git add'
alias grbi='git rebase -i'
alias gc='git commit -v'

function git_current_branch() {
  local ref
  ref=$(__git_prompt_git symbolic-ref --quiet HEAD 2> /dev/null)
  local ret=$?
  if [[ $ret != 0 ]]; then
    [[ $ret == 128 ]] && return  # no git repo.
    ref=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null) || return
  fi
  echo ${ref#refs/heads/}
}

function ggp() {
  if [[ "$#" != 0 ]] && [[ "$#" != 1 ]]; then
    git push origin "${*}"
  else
    [[ "$#" == 0 ]] && local b="$(git_current_branch)"
    git push origin "${b:=$1}"
  fi
}

# starship

eval "$(starship init zsh)"
